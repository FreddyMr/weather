{"version":3,"sources":["Componments/Navbar/Navbar.js","Componments/JumboForm/JumboForm.js","Componments/CardRender/CardRender.js","Componments/CardGrid/CardGrid.js","Componments/BigCard/BigCard.js","Componments/WaitMessage/WaitMessage.js","Componments/Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","Menu","pointing","secondary","id","style","lineHeight","React","Component","JumboForm","props","handleClick","e","form","target","parentElement","formInput","value","console","log","find","selectedCountry","children","exists","csc","getAllCountries","item","name","setState","country","city","state","selectedState","getStatesOfCountry","selectedCity","Form","display","Field","list","placeholder","onSelect","this","getCitiesOfState","map","Button","onClick","type","CardRender","p","Grid","Column","width","stretched","Card","fluid","margin","Content","Header","className","temp","Description","weather","speed","CardGrid","Row","data","description","deg","wind_deg","wind_speed","icon","day","BigCard","curent","main","wind","Math","floor","WaitMessage","Message","Icon","loading","Main","cityname","show","Axios","get","then","res","lonlat","coord","lat","lon","daily","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9d19340d.chunk.js","sourcesContent":["import React from \"react\"\nimport { Menu } from 'semantic-ui-react'\nclass Navbar extends React.Component {\n    render() {\n        return <Menu pointing secondary id='Navbar'>\n            <nav style={{\n                lineHeight:0\n            }}>\n                <h1 id='title'>Freddy Weather Report</h1>\n            </nav>\n        </Menu>\n    }\n}\nexport default Navbar;","import React from 'react'\nimport { Form, Button, Item } from 'semantic-ui-react'\nimport csc from 'country-state-city'\n//const cities = require('all-the-cities');\nclass JumboForm extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            country: {},\n            state: {},\n            city: {},\n        }\n    }\n    handleClick = (e) => {\n        const form = e.target.parentElement\n        var formInput = form[2]\n        if (formInput.value == '') {\n            formInput = form[1]\n        }\n        console.log(form)\n        console.log(formInput)\n        const p = this.props\n        p.find(formInput.value)\n    }\n    selectedCountry = (e) => {\n        const form = e.target.parentElement\n        const value = form.children[0].value\n        const countries = csc.getAllCountries()\n        const exists = countries.find(item => {\n            return item.name === value\n        })\n        if (!exists) {\n            return -1\n        }\n        this.setState({\n            country: exists,\n            city:{},\n            state:{}\n        })\n    }\n    selectedState = (e) => {\n        const form = e.target.parentElement\n        const value = form.children[1].value\n        const countries = csc.getStatesOfCountry(this.state.country.id)\n        const exists = countries.find(item => {\n            return item.name === value\n        })\n        if (!exists) {\n            return -1\n        }\n        this.setState({\n            state: exists,\n            city: {}\n        })\n    }\n    selectedCity = (e) => {\n        const form = e.target.parentElement\n        const formInput = form[2]\n        console.log(form)\n        console.log(formInput)\n        const p = this.props\n        p.find(formInput.value)\n    }\n    render() {\n        return <div id='jumbo-from'>\n            <Form style={{\n                display: 'inline-flex'\n            }}> {/*  make it a flex display  */}\n                <Form.Field> {/*  make it 70% and remove margin  */}\n                    <input id='input' list='countries' placeholder='Country Name' onSelect={this.selectedCountry} />\n                    <input id='input' list='states' placeholder='State Name' onSelect={this.selectedState} />\n                    <input id='input' list='cities' placeholder='City Name' />\n                    <datalist id='cities'>\n                        {csc.getCitiesOfState(this.state.state.id).map((item) => {\n                            return <option value={item.name}>{item.name}</option>\n                        })}\n                    </datalist>\n                    <datalist id='states'>\n                        {csc.getStatesOfCountry(this.state.country.id).map((item) => {\n                            return <option value={item.name}>{item.name}</option>\n                        })}\n                    </datalist>\n                    <datalist id='countries'>\n                        {csc.getAllCountries().map((item) => {\n                            return <option value={item.name}>{item.name}</option>\n                        })}\n                    </datalist>\n                </Form.Field>\n                <Button onClick={this.handleClick} type='submit'>Submit</Button>\n\n            </Form>\n        </div>\n    }\n}\nexport default JumboForm;","import React from \"react\"\nimport { Card,Grid } from 'semantic-ui-react'\nclass CardRender extends React.Component{\n    render(){\n        const p = this.props;\n        return<Grid.Column width={4} stretched>\n        <Card fluid style={{margin:\"10px\"}} width={4}>\n            <Card.Content>\n                <Card.Header className='text'>{p.temp}</Card.Header>\n                <Card.Description className='text'>weather:{p.weather}</Card.Description>\n                <Card.Description className='text'>speed:{p.speed}</Card.Description>\n            </Card.Content>\n        </Card>\n    </Grid.Column>\n    }\n    \n}\nexport default CardRender;","import React from \"react\"\nimport CardRender from \"../CardRender/CardRender\"\nimport { Grid } from 'semantic-ui-react'\nimport Axios from 'axios'\nclass CardGrid extends React.Component{\n    render(){\n        const p = this.props\n        return<Grid>\n            <Grid.Row>\n                {p.data.map((item) => {\n                    return <CardRender weather={item.weather[0].description} deg={item.wind_deg} speed={item.wind_speed} icon={item.weather[0].icon} temp={item.temp.day}></CardRender>\n                })}\n            </Grid.Row>\n        </Grid>\n    }\n}\nexport default CardGrid;","import React from \"react\"\nimport { Card, Grid } from 'semantic-ui-react'\nclass BigCard extends React.Component {\n    render() {\n        const p = this.props;\n        console.log(p.curent)\n        if (p.curent.main) {\n            const weather = p.curent.weather[0].description\n            const speed = p.curent.wind.speed\n            const temp = Math.floor((p.curent.main.temp - 273.15) * 100) / 100\n            return <Card fluid id='bigcard'>\n                <Card.Content style={{\n                    display: \"flex\"\n                }}>\n                    <Grid>\n                        <Grid.Row>\n                            <Grid.Column width={8}>\n                                <Card.Header id='cardheader'>{temp}</Card.Header>\n                            </Grid.Column>\n                            <Grid.Column width={8} id='cardheaderdata'>\n                                <Card.Description>weather:{weather}</Card.Description>\n                                <Card.Description>speed:{speed}</Card.Description>\n                            </Grid.Column>\n                        </Grid.Row>\n                    </Grid>\n                </Card.Content>\n            </Card>\n        }\n        else {\n            return <div></div>\n        }\n    }\n\n}\nexport default BigCard;","import React from 'react'\nimport { Message, Icon } from 'semantic-ui-react'\n\nclass WaitMessage extends React.Component {\n  render() {\n    return <Message icon>\n      <Icon name='circle notched' loading />\n      <Message.Content>\n        <Message.Header>Just one minute</Message.Header>\n      We are fetching the data of the weather for you.\n    </Message.Content>\n    </Message>\n  }\n}\n\nexport default WaitMessage","import React from \"react\"\nimport { Menu } from 'semantic-ui-react'\nimport JumboForm from '../JumboForm/JumboForm'\nimport CardGrid from '../CardGrid/CardGrid'\nimport Axios from 'axios'\nimport BigCard from '../BigCard/BigCard';\nimport WaitMessage from '../WaitMessage/WaitMessage'\nclass Main extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            data: [],\n            lonlat: {},\n            curent: [],\n            show: false,\n        }\n    }\n    find = (cityname) => {\n        this.setState({\n            show: true\n        })\n        Axios.get('https://api.openweathermap.org/data/2.5/weather?q=' + cityname + '&appid=cd04b53f667916513b6b6c7b7d6aed4f').then((res) => {\n            this.setState({\n                lonlat: res.data.coord,\n                curent: res.data\n            })\n            Axios.get('https://api.openweathermap.org/data/2.5/onecall?lat=' + this.state.lonlat.lat + '&lon=' + this.state.lonlat.lon + '&units=metric&exclude=hourly&appid=cd04b53f667916513b6b6c7b7d6aed4f').then((res) => {\n                this.setState({\n                    data: res.data.daily,\n                    show: false\n                })\n                console.log(this.state.data)\n            })\n        })\n    }\n    render() {\n        if (this.state.show) {\n            return <div>\n                <JumboForm find={this.find}></JumboForm>\n                <WaitMessage></WaitMessage>\n                <BigCard curent={this.state.curent}></BigCard>\n                <CardGrid data={this.state.data}></CardGrid>\n            </div>\n        } else {\n            return <div>\n                <JumboForm find={this.find}></JumboForm>\n                <BigCard curent={this.state.curent}></BigCard>\n                <CardGrid data={this.state.data}></CardGrid>\n            </div>\n        }\n\n    }\n\n}\nexport default Main;","import React from 'react';\nimport './App.css';\nimport Navbar from'./Componments/Navbar/Navbar'\nimport Main from './Componments/Main/Main'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar></Navbar>\n      <Main></Main>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}